{
    "openapi": "3.1.0",
    "info": {
        "title": "Printer Supplies API",
        "description": "A simple REST API using Axum for managing printer supplies, such as toners and drums.",
        "contact": {
            "name": "Allan Somensi",
            "email": "allansomensidev@gmail.com"
        },
        "license": {
            "name": "MIT",
            "identifier": "MIT"
        },
        "version": "0.1.0"
    },
    "paths": {
        "/api/v1/brands": {
            "get": {
                "tags": [
                    "Brands"
                ],
                "summary": "List all brands.",
                "description": "Fetches all brands stored in the database. If there are no brands, returns an empty array.",
                "operationId": "show_brands",
                "responses": {
                    "200": {
                        "description": "Brands retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Brand"
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "No brands found in the database"
                    },
                    "500": {
                        "description": "An error occurred while retrieving the brands"
                    }
                }
            },
            "put": {
                "tags": [
                    "Brands"
                ],
                "summary": "Update an existing brand.",
                "description": "This endpoint updates the details of an existing brand in the database.",
                "operationId": "update_brand",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateBrandRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Brand updated successfully",
                        "content": {
                            "text/plain": {
                                "schema": {
                                    "type": "string",
                                    "format": "uuid"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid input, including empty name or name too short/long"
                    },
                    "404": {
                        "description": "Brand ID not found"
                    },
                    "409": {
                        "description": "Conflict: Brand with the same name already exists"
                    },
                    "500": {
                        "description": "An error occurred while updating the brand"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Brands"
                ],
                "summary": "Delete an existing brand.",
                "description": "This endpoint deletes a specific brand from the database using its ID.",
                "operationId": "delete_brand",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DeleteRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Brand deleted successfully",
                        "content": {
                            "text/plain": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Brand ID not found"
                    },
                    "500": {
                        "description": "An error occurred while deleting the brand"
                    }
                }
            }
        },
        "/api/v1/brands/count": {
            "get": {
                "tags": [
                    "Brands"
                ],
                "summary": "Get the total count of brands.",
                "description": "This endpoint retrieves the total number of brands stored in the database.",
                "operationId": "count_brands",
                "responses": {
                    "200": {
                        "description": "Brand count retrieved successfully",
                        "content": {
                            "text/plain": {
                                "schema": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "An error occurred while retrieving the brand count"
                    }
                }
            }
        },
        "/api/v1/brands/{id}": {
            "get": {
                "tags": [
                    "Brands"
                ],
                "summary": "Get a specific brand by ID.",
                "description": "This endpoint retrieves a brand's details from the database using its ID. Returns the brand if found, or a 404 status if not found.",
                "operationId": "search_brand",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The unique identifier of the brand to retrieve",
                        "required": true,
                        "example": "550e8400-e29b-41d4-a716-446655440000"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Brand retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Brand"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "No brand found with the specified ID"
                    },
                    "500": {
                        "description": "An error occurred while retrieving the brand"
                    }
                }
            }
        },
        "/api/v1/migrations": {
            "post": {
                "tags": [
                    "Migrations"
                ],
                "summary": "Execute pending database migrations.",
                "description": "This endpoint executes any pending migrations in the database. It applies migrations that have not yet been run and provides confirmation upon success.",
                "operationId": "live_run",
                "responses": {
                    "200": {
                        "description": "Migrations applied successfully",
                        "content": {
                            "text/plain": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "An error occurred while applying migrations"
                    }
                }
            }
        },
        "/api/v1/movements": {
            "get": {
                "tags": [
                    "Movements"
                ],
                "summary": "List all movements.",
                "description": "Fetches all movements stored in the database. If there are no movements, returns an empty array.",
                "operationId": "show_movements",
                "responses": {
                    "200": {
                        "description": "Movements retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/MovementDetails"
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "No movements found in the database"
                    },
                    "500": {
                        "description": "An error occurred while retrieving the movements"
                    }
                }
            },
            "put": {
                "tags": [
                    "Movements"
                ],
                "summary": "Update an existing movement.",
                "description": "This endpoint updates the details of an existing movement in the database.",
                "operationId": "update_movement",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateMovementRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Movement updated successfully",
                        "content": {
                            "text/plain": {
                                "schema": {
                                    "type": "string",
                                    "format": "uuid"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid input"
                    },
                    "404": {
                        "description": "Movement ID not found"
                    },
                    "500": {
                        "description": "An error occurred while updating the movement"
                    }
                }
            },
            "post": {
                "tags": [
                    "Movements"
                ],
                "summary": "Create a new movement.",
                "description": "This endpoint creates a new movement in the database with the provided details.",
                "operationId": "create_movement",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateMovementRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Movement created successfully",
                        "content": {
                            "text/plain": {
                                "schema": {
                                    "type": "string",
                                    "format": "uuid"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid input"
                    },
                    "500": {
                        "description": "An error occurred while creating the movement"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Movements"
                ],
                "summary": "Delete an existing movement.",
                "description": "This endpoint deletes a specific movement from the database using its ID.",
                "operationId": "delete_movement",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DeleteRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Movement deleted successfully",
                        "content": {
                            "text/plain": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Movement ID not found"
                    },
                    "500": {
                        "description": "An error occurred while deleting the movement"
                    }
                }
            }
        },
        "/api/v1/movements/count": {
            "get": {
                "tags": [
                    "Movements"
                ],
                "summary": "Get the total count of movements.",
                "description": "This endpoint retrieves the total number of movements stored in the database.",
                "operationId": "count_movements",
                "responses": {
                    "200": {
                        "description": "Movement count retrieved successfully",
                        "content": {
                            "text/plain": {
                                "schema": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "An error occurred while retrieving the movement count"
                    }
                }
            }
        },
        "/api/v1/movements/{id}": {
            "get": {
                "tags": [
                    "Movements"
                ],
                "summary": "Get a specific movement by ID.",
                "description": "This endpoint retrieves a movement's details from the database using its ID. Returns the movement if found, or a 404 status if not found.",
                "operationId": "search_movement",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The unique identifier of the movement to retrieve",
                        "required": true,
                        "example": "550e8400-e29b-41d4-a716-446655440000"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Movement retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MovementDetails"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "No movement found with the specified ID"
                    },
                    "500": {
                        "description": "An error occurred while retrieving the movement"
                    }
                }
            }
        },
        "/api/v1/printers": {
            "get": {
                "tags": [
                    "Printers"
                ],
                "summary": "List all printers.",
                "description": "Fetches all printers stored in the database. If there are no printers, returns an empty array.",
                "operationId": "show_printers",
                "responses": {
                    "200": {
                        "description": "Printers retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/PrinterDetails"
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "No printers found in the database"
                    },
                    "500": {
                        "description": "An error occurred while retrieving the printers"
                    }
                }
            },
            "put": {
                "tags": [
                    "Printers"
                ],
                "summary": "Update an existing printer.",
                "description": "This endpoint updates the details of an existing printer in the database.",
                "operationId": "update_printer",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdatePrinterRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Printer updated successfully",
                        "content": {
                            "text/plain": {
                                "schema": {
                                    "type": "string",
                                    "format": "uuid"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid input, including empty name or name too short/long"
                    },
                    "404": {
                        "description": "Printer ID not found"
                    },
                    "409": {
                        "description": "Conflict: Printer with the same name already exists"
                    },
                    "500": {
                        "description": "An error occurred while updating the printer"
                    }
                }
            },
            "post": {
                "tags": [
                    "Printers"
                ],
                "summary": "Create a new printer.",
                "description": "This endpoint creates a new printer in the database with the provided details.",
                "operationId": "create_printer",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreatePrinterRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Printer created successfully",
                        "content": {
                            "text/plain": {
                                "schema": {
                                    "type": "string",
                                    "format": "uuid"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid input, including empty name or name too short/long"
                    },
                    "409": {
                        "description": "Conflict: Printer with the same name already exists"
                    },
                    "500": {
                        "description": "An error occurred while creating the printer"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Printers"
                ],
                "summary": "Delete an existing printer.",
                "description": "This endpoint deletes a specific printer from the database using its ID.",
                "operationId": "delete_printer",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DeleteRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Printer deleted successfully",
                        "content": {
                            "text/plain": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Printer ID not found"
                    },
                    "500": {
                        "description": "An error occurred while deleting the printer"
                    }
                }
            }
        },
        "/api/v1/printers/count": {
            "get": {
                "tags": [
                    "Printers"
                ],
                "summary": "Get the total count of printers.",
                "description": "This endpoint retrieves the total number of printers stored in the database.",
                "operationId": "count_printers",
                "responses": {
                    "200": {
                        "description": "Printer count retrieved successfully",
                        "content": {
                            "text/plain": {
                                "schema": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "An error occurred while retrieving the printer count"
                    }
                }
            }
        },
        "/api/v1/printers/{id}": {
            "get": {
                "tags": [
                    "Printers"
                ],
                "summary": "Get a specific printer by ID.",
                "description": "This endpoint retrieves a printer's details from the database using its ID. Returns the printer if found, or a 404 status if not found.",
                "operationId": "search_printer",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The unique identifier of the printer to retrieve",
                        "required": true,
                        "example": "550e8400-e29b-41d4-a716-446655440000"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Printer retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PrinterDetails"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "No printer found with the specified ID"
                    },
                    "500": {
                        "description": "An error occurred while retrieving the printer"
                    }
                }
            }
        },
        "/api/v1/supplies/brands": {
            "post": {
                "tags": [
                    "Brands"
                ],
                "summary": "Create a new brand.",
                "description": "This endpoint creates a new brand in the database with the provided details.",
                "operationId": "create_brand",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateBrandRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Brand created successfully",
                        "content": {
                            "text/plain": {
                                "schema": {
                                    "type": "string",
                                    "format": "uuid"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid input, including empty name or name too short/long"
                    },
                    "409": {
                        "description": "Conflict: Brand with the same name already exists"
                    },
                    "500": {
                        "description": "An error occurred while creating the brand"
                    }
                }
            }
        },
        "/api/v1/supplies/drums": {
            "get": {
                "tags": [
                    "Drums"
                ],
                "summary": "List all drums.",
                "description": "Fetches all drums stored in the database. If there are no drums, returns an empty array.",
                "operationId": "show_drums",
                "responses": {
                    "200": {
                        "description": "Drums retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Drum"
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "No drums found in the database"
                    },
                    "500": {
                        "description": "An error occurred while retrieving the drums"
                    }
                }
            },
            "put": {
                "tags": [
                    "Drums"
                ],
                "summary": "Update an existing drum.",
                "description": "This endpoint updates the details of an existing drum in the database.",
                "operationId": "update_drum",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateDrumRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Drum updated successfully",
                        "content": {
                            "text/plain": {
                                "schema": {
                                    "type": "string",
                                    "format": "uuid"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid input, including empty name or name too short/long"
                    },
                    "404": {
                        "description": "Drum ID not found"
                    },
                    "409": {
                        "description": "Conflict: Drum with the same name already exists"
                    },
                    "500": {
                        "description": "An error occurred while updating the drum"
                    }
                }
            },
            "post": {
                "tags": [
                    "Drums"
                ],
                "summary": "Create a new drum.",
                "description": "This endpoint creates a new drum in the database with the provided details.",
                "operationId": "create_drum",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateDrumRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Drum created successfully",
                        "content": {
                            "text/plain": {
                                "schema": {
                                    "type": "string",
                                    "format": "uuid"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid input, including empty name or name too short/long"
                    },
                    "409": {
                        "description": "Conflict: Drum with the same name already exists"
                    },
                    "500": {
                        "description": "An error occurred while creating the drum"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Drums"
                ],
                "summary": "Delete an existing drum.",
                "description": "This endpoint deletes a specific drum from the database using its ID.",
                "operationId": "delete_drum",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DeleteRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Drum deleted successfully",
                        "content": {
                            "text/plain": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Drum ID not found"
                    },
                    "500": {
                        "description": "An error occurred while deleting the drum"
                    }
                }
            }
        },
        "/api/v1/supplies/drums/count": {
            "get": {
                "tags": [
                    "Drums"
                ],
                "summary": "Get the total count of drums.",
                "description": "This endpoint retrieves the total number of drums stored in the database.",
                "operationId": "count_drums",
                "responses": {
                    "200": {
                        "description": "Drum count retrieved successfully",
                        "content": {
                            "text/plain": {
                                "schema": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "An error occurred while retrieving the drum count"
                    }
                }
            }
        },
        "/api/v1/supplies/drums/{id}": {
            "get": {
                "tags": [
                    "Drums"
                ],
                "summary": "Get a specific drum by ID.",
                "description": "This endpoint retrieves a drum's details from the database using its ID. Returns the drum if found, or a 404 status if not found.",
                "operationId": "search_drum",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The unique identifier of the drum to retrieve",
                        "required": true,
                        "example": "550e8400-e29b-41d4-a716-446655440000"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Drum retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Drum"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "No drum found with the specified ID"
                    },
                    "500": {
                        "description": "An error occurred while retrieving the drum"
                    }
                }
            }
        },
        "/api/v1/supplies/toners": {
            "get": {
                "tags": [
                    "Toners"
                ],
                "summary": "List all toners.",
                "description": "Fetches all toners stored in the database. If there are no toners, returns an empty array.",
                "operationId": "show_toners",
                "responses": {
                    "200": {
                        "description": "Toners retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Toner"
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "No toners found in the database"
                    },
                    "500": {
                        "description": "An error occurred while retrieving the toners"
                    }
                }
            },
            "put": {
                "tags": [
                    "Toners"
                ],
                "summary": "Update an existing toner.",
                "description": "This endpoint updates the details of an existing toner in the database.",
                "operationId": "update_toner",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateTonerRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Toner updated successfully",
                        "content": {
                            "text/plain": {
                                "schema": {
                                    "type": "string",
                                    "format": "uuid"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid input, including empty name or name too short/long"
                    },
                    "404": {
                        "description": "Toner ID not found"
                    },
                    "409": {
                        "description": "Conflict: Toner with the same name already exists"
                    },
                    "500": {
                        "description": "An error occurred while updating the toner"
                    }
                }
            },
            "post": {
                "tags": [
                    "Toners"
                ],
                "summary": "Create a new toner.",
                "description": "This endpoint creates a new toner in the database with the provided details.",
                "operationId": "create_toner",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateTonerRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Toner created successfully",
                        "content": {
                            "text/plain": {
                                "schema": {
                                    "type": "string",
                                    "format": "uuid"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid input, including empty name or name too short/long"
                    },
                    "409": {
                        "description": "Conflict: Toner with the same name already exists"
                    },
                    "500": {
                        "description": "An error occurred while creating the toner"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Toners"
                ],
                "summary": "Delete an existing toner.",
                "description": "This endpoint deletes a specific toner from the database using its ID.",
                "operationId": "delete_toner",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DeleteRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Toner deleted successfully",
                        "content": {
                            "text/plain": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Toner ID not found"
                    },
                    "500": {
                        "description": "An error occurred while deleting the toner"
                    }
                }
            }
        },
        "/api/v1/supplies/toners/count": {
            "get": {
                "tags": [
                    "Toners"
                ],
                "summary": "Get the total count of toners.",
                "description": "This endpoint retrieves the total number of toners stored in the database.",
                "operationId": "count_toners",
                "responses": {
                    "200": {
                        "description": "Toner count retrieved successfully",
                        "content": {
                            "text/plain": {
                                "schema": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "An error occurred while retrieving the toner count"
                    }
                }
            }
        },
        "/api/v1/supplies/toners/{id}": {
            "get": {
                "tags": [
                    "Toners"
                ],
                "summary": "Get a specific toner by ID.",
                "description": "This endpoint retrieves a toner's details from the database using its ID. Returns the toner if found, or a 404 status if not found.",
                "operationId": "search_toner",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The unique identifier of the toner to retrieve",
                        "required": true,
                        "example": "550e8400-e29b-41d4-a716-446655440000"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Toner retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Toner"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "No toner found with the specified ID"
                    },
                    "500": {
                        "description": "An error occurred while retrieving the toner"
                    }
                }
            }
        },
        "/status": {
            "get": {
                "tags": [
                    "Status"
                ],
                "summary": "Get API and database status",
                "description": "Fetches the current operational status of the API, including database information such as version, max connections, and active connections.",
                "operationId": "show_status",
                "responses": {
                    "200": {
                        "description": "Status retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status"
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    "components": {
        "schemas": {
            "Brand": {
                "type": "object",
                "required": [
                    "id",
                    "name"
                ],
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "name": {
                        "type": "string"
                    }
                }
            },
            "CreateBrandRequest": {
                "type": "object",
                "required": [
                    "name"
                ],
                "properties": {
                    "name": {
                        "type": "string"
                    }
                }
            },
            "CreateDrumRequest": {
                "type": "object",
                "required": [
                    "name"
                ],
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "price": {
                        "type": [
                            "string",
                            "null"
                        ]
                    },
                    "stock": {
                        "type": [
                            "integer",
                            "null"
                        ],
                        "format": "int32"
                    }
                }
            },
            "CreateMovementRequest": {
                "type": "object",
                "required": [
                    "printer_id",
                    "item_id",
                    "quantity"
                ],
                "properties": {
                    "item_id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "printer_id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "quantity": {
                        "type": "integer",
                        "format": "int32"
                    }
                }
            },
            "CreatePrinterRequest": {
                "type": "object",
                "required": [
                    "name",
                    "model",
                    "brand",
                    "toner",
                    "drum"
                ],
                "properties": {
                    "brand": {
                        "type": "string"
                    },
                    "drum": {
                        "type": "string"
                    },
                    "model": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "toner": {
                        "type": "string"
                    }
                }
            },
            "CreateTonerRequest": {
                "type": "object",
                "required": [
                    "name"
                ],
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "price": {
                        "type": [
                            "string",
                            "null"
                        ]
                    },
                    "stock": {
                        "type": [
                            "integer",
                            "null"
                        ],
                        "format": "int32"
                    }
                }
            },
            "Database": {
                "type": "object",
                "required": [
                    "version",
                    "max_connections",
                    "opened_connections"
                ],
                "properties": {
                    "max_connections": {
                        "type": "integer",
                        "format": "int32",
                        "minimum": 0
                    },
                    "opened_connections": {
                        "type": "integer",
                        "format": "int32",
                        "minimum": 0
                    },
                    "version": {
                        "$ref": "#/components/schemas/String"
                    }
                }
            },
            "DeleteRequest": {
                "type": "object",
                "required": [
                    "id"
                ],
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid"
                    }
                }
            },
            "Dependencies": {
                "type": "object",
                "required": [
                    "database"
                ],
                "properties": {
                    "database": {
                        "$ref": "#/components/schemas/Database"
                    }
                }
            },
            "Drum": {
                "type": "object",
                "required": [
                    "id",
                    "name"
                ],
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "name": {
                        "type": "string"
                    },
                    "price": {
                        "type": [
                            "string",
                            "null"
                        ]
                    },
                    "stock": {
                        "type": [
                            "integer",
                            "null"
                        ],
                        "format": "int32"
                    }
                }
            },
            "ItemDetails": {
                "type": "object",
                "required": [
                    "id",
                    "name",
                    "stock"
                ],
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "name": {
                        "type": "string"
                    },
                    "stock": {
                        "type": "integer",
                        "format": "int32"
                    }
                }
            },
            "MovementDetails": {
                "type": "object",
                "required": [
                    "id",
                    "printer",
                    "item",
                    "quantity",
                    "created_at"
                ],
                "properties": {
                    "created_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "item": {
                        "$ref": "#/components/schemas/ItemDetails"
                    },
                    "printer": {
                        "$ref": "#/components/schemas/PrinterDetails"
                    },
                    "quantity": {
                        "type": "integer",
                        "format": "int32"
                    }
                }
            },
            "PrinterDetails": {
                "type": "object",
                "required": [
                    "id",
                    "name",
                    "model"
                ],
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "model": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    }
                }
            },
            "Status": {
                "type": "object",
                "required": [
                    "updated_at",
                    "dependencies"
                ],
                "properties": {
                    "dependencies": {
                        "$ref": "#/components/schemas/Dependencies"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time"
                    }
                }
            },
            "String": {
                "type": "string"
            },
            "Toner": {
                "type": "object",
                "required": [
                    "id",
                    "name"
                ],
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "name": {
                        "type": "string"
                    },
                    "price": {
                        "type": [
                            "string",
                            "null"
                        ]
                    },
                    "stock": {
                        "type": [
                            "integer",
                            "null"
                        ],
                        "format": "int32"
                    }
                }
            },
            "UpdateBrandRequest": {
                "type": "object",
                "required": [
                    "id",
                    "name"
                ],
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "name": {
                        "type": "string"
                    }
                }
            },
            "UpdateDrumRequest": {
                "type": "object",
                "required": [
                    "id"
                ],
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "name": {
                        "type": [
                            "string",
                            "null"
                        ]
                    },
                    "price": {
                        "type": [
                            "string",
                            "null"
                        ]
                    },
                    "stock": {
                        "type": [
                            "integer",
                            "null"
                        ],
                        "format": "int32"
                    }
                }
            },
            "UpdateMovementRequest": {
                "type": "object",
                "required": [
                    "id",
                    "printer_id",
                    "item_id",
                    "quantity"
                ],
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "item_id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "printer_id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "quantity": {
                        "type": "integer",
                        "format": "int32"
                    }
                }
            },
            "UpdatePrinterRequest": {
                "type": "object",
                "required": [
                    "id",
                    "name",
                    "model",
                    "brand",
                    "toner",
                    "drum"
                ],
                "properties": {
                    "brand": {
                        "type": "string"
                    },
                    "drum": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "model": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "toner": {
                        "type": "string"
                    }
                }
            },
            "UpdateTonerRequest": {
                "type": "object",
                "required": [
                    "id"
                ],
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "name": {
                        "type": [
                            "string",
                            "null"
                        ]
                    },
                    "price": {
                        "type": [
                            "string",
                            "null"
                        ]
                    },
                    "stock": {
                        "type": [
                            "integer",
                            "null"
                        ],
                        "format": "int32"
                    }
                }
            }
        }
    },
    "tags": [
        {
            "name": "Status",
            "description": "Status endpoints"
        },
        {
            "name": "Migrations",
            "description": "Migrations endpoints"
        },
        {
            "name": "Toners",
            "description": "Toners endpoints"
        },
        {
            "name": "Drums",
            "description": "Drums endpoints"
        },
        {
            "name": "Brands",
            "description": "Brands endpoints"
        },
        {
            "name": "Printers",
            "description": "Printers endpoints"
        },
        {
            "name": "Movements",
            "description": "Movements endpoints"
        }
    ]
}